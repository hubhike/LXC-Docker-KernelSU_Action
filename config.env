CONFIG_ENV=config.env

#一般来说只需要按实际需要修改5－20行的相关内容就可以。包含18个工作流可同时工作可最大化提高编译内核的成功率，助力LXC,KernelSU 。
#工具链集包含AOSP clang ,LLVM, ARM gcc ,SD-clang(高通的llvm工具链）,Proton-clang, Slim-LLVM, ZyC clang,Mandi-Sa-clang,linaro gcc ,Google gcc_4.9 ,Android NDK ,arter97_gcc等
#本次编译固件来源，请下载此固件后刷编译好的内核：https://xdaforums.com/t/rom-official-ginkgo-10-lineageos-17-1-for-redmi-note-8-8t.4169115/
#内核源地址
KERNEL_SOURCE=https://github.com/SOVIET-ANDROID/kernel_xiaomi_raphael
#分支
KERNEL_SOURCE_BRANCH=14.0-DSP
#内核配置文件
KERNEL_CONFIG=raphael_defconfig

#启用lxc-docker支持，鉴于很多人都不明白，禁用，懂的自己开启。默认支持KernelSU。
ENABLE_LXC=true

#KernelSU相关，默认开启。
ENABLE_KERNELSU=true
ADD_KPROBES_CONFIG=true
ADD_OVERLAYFS_CONFIG=true
KERNELSU_TAG=main

#KERNEL_IMAGE_NAME可能的取值有Image.gz-dtb,Image.gz,Image等
#怎么确定KERNEL_IMAGE_NAME的取值https://github.com/hubhike/LXC-Docker-KernelSU_Action/blob/main/help/readme.md
KERNEL_IMAGE_NAME=Image.gz-dtb
ARCH=arm64

#额外附加命令，默认启用LLVM=1 LLVM_IAS=1 
#EXTRA_CMDS:LD=ld.lld
#EXTRA_CMDS:LLVM=1 LLVM_IAS=1 

#Ccache,可加速二次构建
ENABLE_CCACHE=true 

#关闭fstack-protector-strong(clang-r383902b)
DISABLE_FST=true

#(0)使用Android NDK编译内核，NDK_VERSION可选的值有26,25,24,23,22,21,20,19,18,17,16,15
NDK_VERSION=21

#(1)谷歌官方的AOSP clang，对Build kernel Google git.yml生效
#AOSP 工具链参考选择可从74～111行的内容中进行选择
#更多可从这找 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/
#请以此为准，进行修改，
CLANG_BRANCH=android14-release
CLANG_VERSION=r487747c

#(2)第三方源的AOSP clang
#此配置对 Build Kernel on ubuntu 20.04（build-kernel_ubuntu20.04.yml)和Build Kernel on ubuntu 22.04（build-kernel_ubuntu22.04.yml)都生效
TCLANG_BRANCH=clang-r487747c

#目前存在的clang分支如下,即TCLANG_BRANCH的可取值（54～67行的内容）
#clang-r498229
#clang-r487747c
#clang-r487747b
#clang-r487747
#clang-r475365b
#clang-r475365
#clang-r468909b
#clang-r468909
#clang-r450784e
#clang-r450784d
#clang-r458507
#clang-r399163b
#clang-r383902
#clang-r353983c
#
# 

#(3)使用SD-clang构建内核，高通的clang编译器。默认启用启用分支10,目前存在的分支有 10,12,14,14.03
SD_CLANG_BRANCH=10

#比较合适的几类配置
#适合于老内核，安卓11及以下最稳的配置,默认此配置。运行构建时请使用 Build Kernel on ubuntu 20.04 (build-kernel.yml）此配置使用ubuntu 20.04。对于非常老的内核使用Google gcc-4.9构建，自行改一下。
#  android11-release
#  r383902b

#安卓12及以上，运行构建时请使用Build Kernel on ubuntu 22.04（build-kernel_ubuntu22.04.yml）
#  android12-release
#  r416183b


# 安卓 13
#  android13-release
#  r450784d

#主线,高版本内核使用
#  main
#  r475365b



                    ####CLANG_BRANCH###CLANG_VERSION###

#    main            android13-release    android12-release       android11-release        android10-release
#
#clang-3289846       clang-r450784d       clang-3289846           clang-3289846            clang-3289846
#clang-r450784e      clang-3289846        clang-r383902           clang-r353983c           clang-r328903
#clang-r475365b                           clang-r416183b          clang-r353983c1          clang-r339409b
#clang-r487747c                           clang-r416183b1         clang-r365631c           clang-r344140b 
#clang-r498229                                                    clang-r370808            clang-r346389b
#clang-r498229b                                                   clang-r370808b           clang-r346389c
#                                                                 clang-r377782b           clang-r349610
#                                                                 clang-r377782c           clang-r349610b
#                                                                 clang-r377782d           clang-r353983b
#                                                                 clang-r383902            clang-r353983c
#                                                                 clang-r383902b
#



#自定义工具链选择，选择proton-clang,该工具链针对AArch32、AArch64 和 x86 架构。它是用 LTO 和 PGO 构建的，以尽可能减少编译时间。
#官方版(已停止维护),最新到clang-13 https://github.com/kdrag0n/proton-clang
#若需要更旧的clang13以下 可到这找到https://github.com/kdrag0n/proton-clang/releases,自行改相关内容
#第三方维护版，最新到clang-17 ，默认使用此版。https://gitlab.com/LeCmnGend/proton-clang
#第三方维护版，目前存在的分支有 clang-13 , clang-14, clang-15, clang-16, clang-17

#(4)若要使用proton-clang，请使用build kernel by protonclang (build-kernel_by_proton-clang.yml)
ENABLE_PROTON_CLANG=true
PROTON_CLANG_SOURCE=https://gitlab.com/LeCmnGend/proton-clang
#PROTON_CLANG_BRANCH可选的值有 clang-13 ,clang-14, clang-15, clang-16, clang-17
PROTON_CLANG_BRANCH=clang-13



#(5)与proton-clang类似项目Neutron-clang,官网https://github.com/Neutron-Toolchains/
#目前存在版本main,16,17,18。main始终指向最新的Neutron-clang
NEUTRON_CLANG_VERSION=main
#采用较新的glibc，一般来是Neutron-clang工作所需要的，如果出现glibc相关的错误，请启用。更多参考这https://github.com/Neutron-Toolchains/clang-build-catalogue#how-to-install
ENABLE_CLIBC_PATCH=true

#(5.5)tc_build项目作者的预编译Slim-llvm toolchain ,使用pgo优化，速度更快。跟多介绍见http://kernel.mirror.iweb.ca/tools/llvm/。配合ELECTRON_BINUTILS使用。
#目前SLIM_LLVM_CLANG_VERSION的可选值有18.1.0 17.0.6 16.0.6 15.0.7 14.0.6 13.0.1 12.0.1 11.1.0
SLIM_LLVM_CLANG_VERSION=15.0.7
#基于tc-build的相同配置的binutils,配合slim llvm使用。ELECTRON_BINUTILS_VERSION2的可选值有 2.41 2.40 2.39 2.38 2.37 2.36.1 2.36 2.35.2 2.35.1 2.35 2.34 2.33.1 2.32 2.31
ELECTRON_BINUTILS_VERSION2=2.39


#（6）使用LLVM-clang，加我自己制作的electron-binutils来构建内核,由于ubuntu自带的binutils版本过少，加入electron-binutils可有更多版本的binutils,也更加合理的和各种llvm clang版本匹配。ELECTRON_BINUTILS_VERSION1和ELECTRON_BINUTILS_VERSION
#的取值是一样的，主要是懒得改了，加个1来区分，如果ELECTRON_BINUTILS_VERSION1留空则用ubuntu自带的binutils, 同理适用ELECTRON_BINUTILS_VERSION。(运行系统ubuntu-20.04)
#目前存在版本16.0.0  15.0.6  14.0.0  13.0.0  12.0.0  11.1.0  11.0.0  10.0.1  10.0.0  9.0.1  8.0.1
LLVM_CLANG_VERSION=11.0.0
#基于tc-build的相同配置的binutils,ELECTRON_BINUTILS_VERSION1的可选值有 2.41 2.40 2.39 2.38 2.37 2.36.1 2.36 2.35.2 2.35.1 2.35 2.34 2.33.1 2.32 2.31
ELECTRON_BINUTILS_VERSION1=2.35

#（6.5）使用llvm官方发布的最新的LLVM，基于ubuntu-22.04，加我自己制作的electron-binutils来构建内核。更新更快。(运行系统ubuntu-22.04,配置文件为build-kernel_by_LLVM-least.yml)
#目前LLVM存在版本即LLVM_VERSION的可选值 17.06 17.05 17.04 17.02 16.04 16.03 16.02
LLVM_VERSION=17.06
#基于tc-build的相同配置的binutils,ELECTRON_BINUTILS_VERSION的可选值有 2.41 2.40 2.39 2.38 2.37 2.36.1 2.36 2.35
ELECTRON_BINUTILS_VERSION=2.41




#（7）使用ZyC clang，构建内核。该配置对build-kernel_by_ZyC-clang.yml生效
#目前存在版本 19,18,17,16.05,16
ZYC_CLANG_VERSION=16


#（8）使用ARM gcc，构建内核。该配置对build-kernel_by_ARM-gcc.yml生效
 #目前存在版本 12.3  11.3  10.3  10.2 9.2 8.32  8.31  8.22  8.21
ARM_GCC_VERSION=8.21

#（9）使用Mandi-Sa clang,构建内核.该配置对build-kernel_by_Mandi-Sa-clang.yml生效
#目前存在版本 15 16 17 18 19
MANDI-SA_CLANG_VERSION=18

#（10）使用自编译的Electron clang,来构建内核，仿proton-clang设计，采用llvm官方发布的稳定源码构建，集成binutils。Electron clang采用lto（full），pgo优化，加速内核构建。该配置对build-kernel_by_Electron-clang.yml(先画个饼，有时间又搞）。
#目前存在版本 16.06 17.06
#暂时无法使用
ELECTRON_CLANG_VERSION=17.06

#Kali-Nethunter支持，默认关闭，支持内核版本4.4-4.19。旧的内核版本或补丁失败的参考kali官方补丁https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel
#仅Build kernel by clang-r383902b支持。https://www.kali.org/docs/nethunter/nethunter-kernel-2-config-1/
ENABLE_NETHUNTER=false
#另一个，问题有点多。追求极客，可搞下，build-geek_kernel.yml.bak。
ENABLE_KALI=true
KERNEL_VERSION=4.19 
ENABLE_WIREGUARD=false

#（11）还有一些固定配置，未列出的编译器，总之一句话，够用了，此编译器集足够编译2018年到现在的所有的内核版本，当然一些细节需要自己处理，自行研究吧。









#一般就别动下↓面的内容了，重点改上↑↑↑↑边的就可以了

# Clang
## Custom
USE_CUSTOM_CLANG=false
CUSTOM_CLANG_SOURCE=
CUSTOM_CLANG_BRANCH=

### if your set USE CUSTOM CLANG to false than DO NOT CHANGE CUSTOM CMDS
CUSTOM_CMDS:CLANG_TRIPLE=aarch64-linux-gnu-

## AOSP
#CLANG_BRANCH=android12-platform-release
#CLANG_VERSION=r416183b

# GCC
ENABLE_GCC_ARM64=true
ENABLE_GCC_ARM32=true
USE_CUSTOM_GCC_64=false
CUSTOM_GCC_64_SOURCE=
CUSTOM_GCC_64_BRANCH=
CUSTOM_GCC_64_BIN=aarch64-linux-android-
USE_CUSTOM_GCC_32=false
CUSTOM_GCC_32_SOURCE=
CUSTOM_GCC_32_BRANCH=
CUSTOM_GCC_32_BIN=arm-linux-androideabi-

# KernelSU flags
#ENABLE_KERNELSU=false
#KERNELSU_TAG=main
KSU_EXPECTED_SIZE=
KSU_EXPECTED_HASH=

# Configuration
DISABLE-LTO=true
DISABLE_CC_WERROR=true
#ADD_KPROBES_CONFIG=false
#ADD_OVERLAYFS_CONFIG=false

# Ccache
#ENABLE_CCACHE=true

# DTBO image
NEED_DTBO=false

# Build boot images
BUILD_BOOT_IMG=false
SOURCE_BOOT_IMAGE=https://raw.githubusercontent.com/xiaoleGun/KernelSU_action/main/boot/boot.img
# 一般来说用AnyKernel3打包内核就好了，如果要用img打包，你要上传当前系统的boot镜像。
